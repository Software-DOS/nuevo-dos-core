import { Component, OnInit, NgZone } from '@angular/core';
import { FormBuilder,Validator, Validators } from '@angular/forms';
import { functions } from 'src/app/helpers/functions';
import { Ilogin } from 'src/app/interface/ilogin';
import { LoginService } from 'src/app/services/login.service';
import Swal, { SweetAlertIcon } from 'sweetalert2';
import { alerts } from 'src/app/helpers/alerts';
// import { subscribeOn } from 'rxjs'; // ‚≠ê L√≠nea no utilizada - puedes eliminar
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  // ‚≠ê Formulario reactivo para login
  public f = this.form.group({
      email:['',[Validators.required,Validators.email]],
      password:['',Validators.required]
  });

  // ‚≠ê Variables de estado del componente
  formSubmitted=false;
  verLogin=true;
  cambiarClave=false;
  nuevaClave=false;
  loading = false;
  
  // ‚≠ê Variables para funcionalidad de cambio de contrase√±a
  public ClaveTemporal:any="";
  public emailClave:string="";
  public clave1:string="";
  public clave2:string="";
  public generica: any = [];
  public carga: any = [];
  
  constructor(
    private form: FormBuilder,
    private loginService: LoginService,
    private router: Router,
    private ngZone: NgZone // ‚≠ê Necesario para navegaci√≥n correcta
  ) { }

  ngOnInit(): void {
    // ‚≠ê Verificar si el usuario ya est√° autenticado
    if (this.loginService.isLoggedIn()) {
      console.log("üë§ [DEBUG] User already logged in, redirecting to home");
      this.router.navigateByUrl("/");
    }
  }

  // ‚≠ê Funci√≥n principal de login
  login(){
     this.formSubmitted=true;
     console.log("üéØ [DEBUG] Login form submitted");
     console.log("üéØ [DEBUG] Form validity:", this.f.valid);
     
      // ‚≠ê Validaci√≥n del formulario
      if(this.f.invalid){
        console.log("‚ùå [DEBUG] Form is invalid, stopping login");
        return;
      }
      
      // ‚≠ê Preparar datos para env√≠o
      const data: Ilogin = {
        email:this.f.controls['email'].value,
        password:this.f.controls['password'].value
      }
      
      console.log("üì§ [DEBUG] Sending login data:", JSON.stringify(data)); 
      this.loading = true;
      
      // ‚≠ê Llamada al servicio de login
      this.loginService.login(data).subscribe({
          next: (resp:any) => {
             console.log("‚úÖ [DEBUG] Login successful, response:", resp);
             
              // ‚≠ê Verificaci√≥n doble del token guardado
              const valor = sessionStorage.getItem('token');
              console.log("üîç [DEBUG] Token from sessionStorage after login:", valor);
              
              if (typeof valor === 'string' && valor.trim() !== '') {
                try {
                  var IdEmpleado = JSON.parse(atob(valor.split('.')[1]));
                  console.log("üë§ [DEBUG] Decoded employee data:", IdEmpleado);
                  
                  // ‚≠ê Verificar claims de email en diferentes formatos
                  const email = IdEmpleado['email'] || 
                               IdEmpleado['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'] ||
                               IdEmpleado['Email'];
                  
                  if (!email) {
                    console.error("‚ùå [DEBUG] No email claim found in token");
                    alerts.basicAlert("Error", "Token inv√°lido - no se encontr√≥ email", "error");
                    this.loading = false;
                    return;
                  }
                  
                  console.log("‚úÖ [DEBUG] Email found in token:", email);
                  
                  // ‚≠ê Usar NgZone para asegurar que la navegaci√≥n funcione correctamente
                  this.ngZone.run(() => {
                    console.log("üîÑ [DEBUG] Running navigation inside NgZone");
                    this.loading = false;
                    
                    console.log("üöÄ [DEBUG] Attempting navigation to home");
                    
                    // ‚≠ê Navegaci√≥n con fallback en caso de fallo
                    this.router.navigate(['/']).then((success) => {
                      console.log("‚úÖ [DEBUG] Navigation success:", success);
                      if (success) {
                        // ‚≠ê Mostrar mensaje de √©xito despu√©s de navegaci√≥n exitosa
                        alerts.basicAlert("√âxito", "Login exitoso", "success");
                      } else {
                        console.log("‚ö†Ô∏è [DEBUG] Navigation failed, trying alternative method");
                        // ‚≠ê Fallback: recarga forzada de p√°gina
                        window.location.href = '/';
                      }
                    }).catch((navError) => {
                      console.error("‚ùå [DEBUG] Navigation error:", navError);
                      // ‚≠ê Fallback final: recarga forzada
                      window.location.href = '/';
                    });
                  });
                  
                } catch (tokenError) {
                  console.error("‚ùå [DEBUG] Error parsing token:", tokenError);
                  alerts.basicAlert("Error", "Error al procesar el token de autenticaci√≥n", "error");
                  this.loading = false;
                }
              } else {
                console.error("‚ùå [DEBUG] No valid token found after login");
                alerts.basicAlert("Error", "No se recibi√≥ un token v√°lido del servidor", "error");
                this.loading = false;
              }     
          },
          error: (err) => {
              // ‚≠ê Manejo comprehensivo de errores
              console.error("‚ùå [DEBUG] Login failed with error:", err);
              
              if(err.error && err.error.status === 404){
                alerts.basicAlert("Error","Invalid password","error");         
              } else if(err.status === 401) {
                alerts.basicAlert("Error","Invalid email or password","error");
              } else if(err.status === 0) {
                alerts.basicAlert("Error","Network error - Please check your connection","error");
              } else {
                alerts.basicAlert("Error","Invalid email or password","error");
              }
              this.loading = false;
          }
      });
  }

  // ‚≠ê Funciones para cambio de contrase√±a
  CambiarClave(){
    this.verLogin = false;
    this.cambiarClave = true;
    this.nuevaClave=false;
  }

  CambiarContrasenia(){
    if(this.emailClave==""){
      alerts.basicAlert('Advertencia', 'Debe ingresar el email', 'warning');
    }
    else{
      this.loading=true;
      this.loginService.ActualizarClaveEmpleado(this.emailClave, "Actualizar Contrase√±a","RESET USUARIO","",0).subscribe(
        (resp: any) => {
          this.carga = resp['$values'];
          this.generica = this.carga[0];
          let valor1 = this.generica.valor1;
          let valor2 = this.generica.valor2;
          
          if (valor1 == 1) {
            this.verLogin = true;
            this.cambiarClave = false;
            this.nuevaClave=false;
            this.loading=false;
            alerts.basicAlert('Excelente', valor2, 'success');
          }
        },
        (err) => {
          console.log('err:', err);
          this.loading = false; // ‚≠ê Asegurar que loading se resetee en caso de error
        }
      );
    }
  }

  ActualizarContrasenia(){
    if(this.clave1!=this.clave2){
      alerts.basicAlert('Advertencia', 'La clave no son iguales..', 'warning');
    }
    else{
      this.loading=true;
      this.loginService.ActualizarClaveEmpleado(this.f.controls['email'].value, "Actualizar Contrase√±a","RESET USUARIO",this.clave2,1).subscribe(
        (resp: any) => {
          this.carga = resp['$values'];
          this.generica = this.carga[0];
          let valor1 = this.generica.valor1;
          let valor2 = this.generica.valor2;
          
          if (valor1 == 1) {
            this.verLogin = true;
            this.cambiarClave = false;
            this.nuevaClave=false;
            this.loading=false;
            this.formSubmitted=false;
            this.f.controls['email'].setValue("");
            this.f.controls['password'].setValue("");
            alerts.basicAlert('Excelente', valor2, 'success');
          }
        },
        (err) => {
          console.log('err:', err);
          this.loading = false; // ‚≠ê Asegurar que loading se resetee en caso de error
        }
      );
    }
  }

  // ‚≠ê Funci√≥n helper para validaci√≥n de campos
  invalidField(field:string){
    return functions.invalidField(field,this.f,this.formSubmitted);
  }
}
